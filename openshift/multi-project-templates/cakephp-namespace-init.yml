apiVersion: template.openshift.io/v1
kind: Template
labels:
  app: cakephp-mysql-persistent
  template: cakephp-mysql-persistent
message: |-
  The following service(s) have been created in your project: ${NAME}, ${DATABASE_SERVICE_NAME}.

  For more information about using this template, including OpenShift considerations, see https://github.com/sclorg/cakephp-ex/blob/master/README.md.
metadata:
  annotations:
    description: An example CakePHP application with a MySQL database. For more information
      about using this template, including OpenShift considerations, see https://github.com/sclorg/cakephp-ex/blob/master/README.md.
    iconClass: icon-php
    openshift.io/display-name: CakePHP + MySQL
    openshift.io/documentation-url: https://github.com/sclorg/cakephp-ex
    openshift.io/long-description: This template defines resources needed to develop
      a CakePHP application, including a build configuration, application deployment
      configuration, and database deployment configuration.
    openshift.io/provider-display-name: Red Hat, Inc.
    openshift.io/support-url: https://access.redhat.com
    samples.operator.openshift.io/version: 4.6.17
    tags: quickstart,php,cakephp
    template.openshift.io/bindable: "false"
  creationTimestamp: "2020-05-07T14:18:26Z"
  labels:
    samples.operator.openshift.io/managed: "true"
  name: cakephp-mysql-persistent
  namespace: openshift
  resourceVersion: "532091921"
  selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/cakephp-mysql-persistent
  uid: 0a9cbf74-a242-42a5-bc3c-5b972f8bebbc
parameters:
- name: NAME
  description: The name assigned to all of the frontend objects defined in this template.
  displayName: Name
  required: true
  value: cakephp-mysql-persistent
- name: FRONTEND_NAMESPACE
  displayName: Frontend Namespace
  description: >-
    The OpenShift Namespace where the Frontend application deployment, route,
    and service reside.
  required: true
  value: cakephp-example-frontend
- name: CAKEPHP_SECRET_TOKEN
  displayName: CakePHP secret token
  from: '[\w]{50}'
  generate: expression
- name: CAKEPHP_SECURITY_SALT
  description: Security salt for session hash.
  displayName: CakePHP Security Salt
  generate: expression
  from: '[a-zA-Z0-9]{40}'
- name: DATABASE_NAMESPACE
  displayName: Database Namespace
  description: >-
    The OpenShift Namespace where the Database deployment and service reside.
  required: true
  value: cakephp-example-database
- name: DATABASE_SERVICE_NAME
  displayName: GitHub Webhook Secret
  from: '[a-zA-Z0-9]{40}'
  generate: expression
  required: true
  value: mysql
- name: DATABASE_ENGINE
  description: 'Database engine: postgresql, mysql or sqlite (default).'
  displayName: Database Engine
  required: true
  value: mysql
- name: DATABASE_NAME
  displayName: Database Name
  required: true
  value: default
- name: DATABASE_USER
  displayName: Database User
  required: true
  value: cakephp
- name: DATABASE_PASSWORD
  displayName: Database Password
  from: '[a-zA-Z0-9]{16}'
  generate: expression
  description: Set this to a long random string.
- name: VOLUME_CAPACITY
  description: Volume space available for data, e.g. 512Mi, 2Gi
  displayName: Volume Capacity
  required: true
  value: 1Gi
objects:
- kind: Secret
  apiVersion: v1
  metadata:
    name: ${NAME}
    namespace: ${FRONTEND_NAMESPACE}
  stringData:
    database-host: ${DATABASE_SERVICE_NAME}.${DATABASE_NAMESPACE}.svc
    database-name: ${DATABASE_NAME}
    database-user: ${DATABASE_USER}
    database-password: ${DATABASE_PASSWORD}
    cakephp-secret-token: ${CAKEPHP_SECRET_TOKEN}
    cakephp-security-salt: ${CAKEPHP_SECURITY_SALT}
- kind: Secret
  apiVersion: v1
  metadata:
    name: ${NAME}
    namespace: ${DATABASE_NAMESPACE}
  stringData:
    database-name: ${DATABASE_NAME}
    database-user: ${DATABASE_USER}
    database-password: ${DATABASE_PASSWORD}
    database-root-password: ${DATABASE_ROOT_PASSWORD}
- kind: PersistentVolumeClaim
  apiVersion: v1
  metadata:
    name: ${DATABASE_SERVICE_NAME}
    namespace: ${DATABASE_NAMESPACE}
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: ${VOLUME_CAPACITY}
